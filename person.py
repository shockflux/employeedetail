import json
from web3 import Web3

def add(contract):
    #i=1
    name, last_name = [str(name) for name in input("Enter Full Name:: ").split()]
    email_id = input("Enter Email ID::")
    setval = contract.functions.addperson(name,last_name,email_id).transact()
    receipt = web3.eth.waitForTransactionReceipt(setval)
    #print(contract.functions.output(count).call())

def view(contract,count):
    print("Total person::",count)
    n = int(input("Enter serial number to get detail::"))
    while True:
        n = int(input("Enter serial number to get detail::"))
        if (n<=count):
            print(contract.functions.output(n).call())
        else:
            print('Please enter number lesser than count or equal to count')
            break
    



ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))
#print(web3.isConnected())

web3.eth.defaultAccount = web3.eth.accounts[0]


abi = json.loads('[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_lastname","type":"string"},{"internalType":"string","name":"_email","type":"string"}],"name":"addperson","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"output","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"lastname","type":"string"},{"internalType":"string","name":"email","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"people","outputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_lastname","type":"string"},{"internalType":"string","name":"_email","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}]')
bytecode = "0x608060405234801561001057600080fd5b506100c16040518060400160405280600781526020017f737761726f6f70000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f72000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600981526020017f73624073622e636f6d00000000000000000000000000000000000000000000008152506100c660201b60201c565b61021d565b60405180608001604052806001548152602001848152602001838152602001828152506000806001548152602001908152602001600020600082015181600001556020820151816001019080519060200190610123929190610178565b506040820151816002019080519060200190610140929190610178565b50606082015181600301908051906020019061015d929190610178565b50905050600160008154809291906001019190505550505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b957805160ff19168380011785556101e7565b828001600101855582156101e7579182015b828111156101e65782518255916020019190600101906101cb565b5b5090506101f491906101f8565b5090565b61021a91905b808211156102165760008160009055506001016101fe565b5090565b90565b610b0c8061022c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd1461005157806364f9016b1461006f578063764a01c8146101ee5780639e7a13ad146103d7575b600080fd5b61005961055d565b6040518082815260200191505060405180910390f35b61009b6004803603602081101561008557600080fd5b8101908080359060200190929190505050610563565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156100e35780820151818401526020810190506100c8565b50505050905090810190601f1680156101105780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156101af578082015181840152602081019050610194565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6103d56004803603606081101561020457600080fd5b810190808035906020019064010000000081111561022157600080fd5b82018360208201111561023357600080fd5b8035906020019184600183028401116401000000008311171561025557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102b857600080fd5b8201836020820111156102ca57600080fd5b803590602001918460018302840111640100000000831117156102ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561034f57600080fd5b82018360208201111561036157600080fd5b8035906020019184600183028401116401000000008311171561038357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610788565b005b610403600480360360208110156103ed57600080fd5b810190808035906020019092919050505061083a565b60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610451578082015181840152602081019050610436565b50505050905090810190601f16801561047e5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156104b757808201518184015260208101905061049c565b50505050905090810190601f1680156104e45780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561051d578082015181840152602081019050610502565b50505050905090810190601f16801561054a5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b60015481565b6060806060600080858152602001908152602001600020600101600080868152602001908152602001600020600201600080878152602001908152602001600020600301828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561063c5780601f106106115761010080835404028352916020019161063c565b820191906000526020600020905b81548152906001019060200180831161061f57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107745780601f1061074957610100808354040283529160200191610774565b820191906000526020600020905b81548152906001019060200180831161075757829003601f168201915b505050505090509250925092509193909250565b604051806080016040528060015481526020018481526020018381526020018281525060008060015481526020019081526020016000206000820151816000015560208201518160010190805190602001906107e5929190610a32565b506040820151816002019080519060200190610802929190610a32565b50606082015181600301908051906020019061081f929190610a32565b50905050600160008154809291906001019190505550505050565b6000602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ec5780601f106108c1576101008083540402835291602001916108ec565b820191906000526020600020905b8154815290600101906020018083116108cf57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561098a5780601f1061095f5761010080835404028352916020019161098a565b820191906000526020600020905b81548152906001019060200180831161096d57829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b5050505050905084565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a7357805160ff1916838001178555610aa1565b82800160010185558215610aa1579182015b82811115610aa0578251825591602001919060010190610a85565b5b509050610aae9190610ab2565b5090565b610ad491905b80821115610ad0576000816000905550600101610ab8565b5090565b9056fea265627a7a72315820ab8b9287606126850d0768a6bdd2a97d335fd99d69249c784e5d7140022ade5664736f6c63430005110032"

cont = web3.eth.contract(abi=abi, bytecode=bytecode)

tx_hash = cont.constructor().transact()
receipt = web3.eth.waitForTransactionReceipt(tx_hash)

contract = web3.eth.contract(
    address=receipt.contractAddress,
    abi=abi
)

print(contract.functions.output(0).call())

try:
    count = 1
    while True:
        add(contract)
        count = count+1
except KeyboardInterrupt:
    print("done adding")
    view(contract,count)







